# -*- coding: utf-8 -*-
"""OssProject#2-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M5AK-Hm3t4WR38zBt0jAn0WWjIwn2AsG
"""

import pandas as pd
information = pd.read_csv("/content/drive/MyDrive/2019_kbo_for_kaggle_v2.csv")
pd.set_option('mode.chained_assignment',  None)

playerIF = pd.DataFrame(information)

year2015 = playerIF[playerIF['year'] == 2015]

year2015['rank'] = year2015['H'].rank(ascending=False, method='first')
year2015_H_rank = year2015.sort_values(by='rank')
year2015_H_top10 = year2015_H_rank['batter_name'].head(10)
del year2015['rank']

year2015['rank'] = year2015['avg'].rank(ascending=False, method='first')
year2015_avg_rank = year2015.sort_values(by='rank')
year2015_avg_top10 = year2015_avg_rank['batter_name'].head(10)
del year2015['rank']

year2015['rank'] = year2015['HR'].rank(ascending=False, method='first')
year2015_HR_rank = year2015.sort_values(by='rank')
year2015_HR_top10 = year2015_HR_rank['batter_name'].head(10)
del year2015['rank']

year2015['rank'] = year2015['OBP'].rank(ascending=False, method='first')
year2015_OBP_rank = year2015.sort_values(by='rank')
year2015_OBP_top10 = year2015_OBP_rank['batter_name'].head(10)
del year2015['rank']

print("<2015년 안타(H) 부문 top 10 선수>")
print(year2015_H_top10)
print("<2015년 타율(avg) 부문 top 10 선수>")
print(year2015_avg_top10)
print("<2015년 홈런(HR) 부문 top 10 선수>")
print(year2015_HR_top10)
print("<2015년 출루율(OBP) 부문 top 10 선수>")
print(year2015_OBP_top10)

year2016 = playerIF[playerIF['year'] == 2016]

year2016['rank'] = year2016['H'].rank(ascending=False, method='first')
year2016_H_rank = year2016.sort_values(by='rank')
year2016_H_top10 = year2016_H_rank['batter_name'].head(10)
del year2016['rank']

year2016['rank'] = year2016['avg'].rank(ascending=False, method='first')
year2016_avg_rank = year2016.sort_values(by='rank')
year2016_avg_top10 = year2016_avg_rank['batter_name'].head(10)
del year2016['rank']

year2016['rank'] = year2016['HR'].rank(ascending=False, method='first')
year2016_HR_rank = year2016.sort_values(by='rank')
year2016_HR_top10 = year2016_HR_rank['batter_name'].head(10)
del year2016['rank']

year2016['rank'] = year2016['OBP'].rank(ascending=False, method='first')
year2016_OBP_rank = year2016.sort_values(by='rank')
year2016_OBP_top10 = year2016_OBP_rank['batter_name'].head(10)
del year2016['rank']

print("\n<2016년 안타(H) 부문 top 10 선수>")
print(year2016_H_top10)
print("<2016년 타율(avg) 부문 top 10 선수>")
print(year2016_avg_top10)
print("<2016년 홈런(HR) 부문 top 10 선수>")
print(year2016_HR_top10)
print("<2016년 출루율(OBP) 부문 top 10 선수>")
print(year2016_OBP_top10)

year2017 = playerIF[playerIF['year'] == 2017]

year2017['rank'] = year2017['H'].rank(ascending=False, method='first')
year2017_H_rank = year2017.sort_values(by='rank')
year2017_H_top10 = year2017_H_rank['batter_name'].head(10)
del year2017['rank']

year2017['rank'] = year2017['avg'].rank(ascending=False, method='first')
year2017_avg_rank = year2017.sort_values(by='rank')
year2017_avg_top10 = year2017_avg_rank['batter_name'].head(10)
del year2017['rank']

year2017['rank'] = year2017['HR'].rank(ascending=False, method='first')
year2017_HR_rank = year2017.sort_values(by='rank')
year2017_HR_top10 = year2017_HR_rank['batter_name'].head(10)
del year2017['rank']

year2017['rank'] = year2017['OBP'].rank(ascending=False, method='first')
year2017_OBP_rank = year2017.sort_values(by='rank')
year2017_OBP_top10 = year2017_OBP_rank['batter_name'].head(10)
del year2017['rank']

print("\n<2017년 안타(H) 부문 top 10 선수>")
print(year2017_H_top10)
print("<2017년 타율(avg) 부문 top 10 선수>")
print(year2017_avg_top10)
print("<2017년 홈런(HR) 부문 top 10 선수>")
print(year2017_HR_top10)
print("<2017년 출루율(OBP) 부문 top 10 선수>")
print(year2017_OBP_top10)

year2018 = playerIF[playerIF['year'] == 2018]

year2018['rank'] = year2018['H'].rank(ascending=False, method='first')
year2018_H_rank = year2018.sort_values(by='rank')
year2018_H_top10 = year2018_H_rank['batter_name'].head(10)
del year2018['rank']

year2018['rank'] = year2018['avg'].rank(ascending=False, method='first')
year2018_avg_rank = year2018.sort_values(by='rank')
year2018_avg_top10 = year2018_avg_rank['batter_name'].head(10)
del year2018['rank']

year2018['rank'] = year2018['HR'].rank(ascending=False, method='first')
year2018_HR_rank = year2018.sort_values(by='rank')
year2018_HR_top10 = year2018_HR_rank['batter_name'].head(10)
del year2018['rank']

year2018['rank'] = year2018['OBP'].rank(ascending=False, method='first')
year2018_OBP_rank = year2018.sort_values(by='rank')
year2018_OBP_top10 = year2018_OBP_rank['batter_name'].head(10)
del year2018['rank']

print("\n<2018년 안타(H) 부문 top 10 선수>")
print(year2018_H_top10)
print("<2018년 타율(avg) 부문 top 10 선수>")
print(year2018_avg_top10)
print("<2018년 홈런(HR) 부문 top 10 선수>")
print(year2018_HR_top10)
print("<2018년 출루율(OBP) 부문 top 10 선수>")
print(year2018_OBP_top10)



year2018_catcher = year2018[year2018['cp'] == '포수']
year2018_catcher_war = year2018_catcher.sort_values(by='war', ascending=False)
year2018_catcher_war_top1 = year2018_catcher_war[['cp', 'batter_name']].head(1)

year2018_first = year2018[year2018['cp'] == '1루수']
year2018_first_war = year2018_first.sort_values(by='war', ascending=False)
year2018_first_war_top1 = year2018_first_war[['cp', 'batter_name']].head(1)

year2018_second = year2018[year2018['cp'] == '2루수']
year2018_second_war = year2018_second.sort_values(by='war', ascending=False)
year2018_second_war_top1 = year2018_second_war[['cp', 'batter_name']].head(1)

year2018_third = year2018[year2018['cp'] == '3루수']
year2018_third_war = year2018_third.sort_values(by='war', ascending=False)
year2018_third_war_top1 = year2018_third_war[['cp', 'batter_name']].head(1)

year2018_shortStop = year2018[year2018['cp'] == '유격수']
year2018_shortStop_war = year2018_shortStop.sort_values(by='war', ascending=False)
year2018_shortStop_war_top1 = year2018_shortStop_war[['cp', 'batter_name']].head(1)

year2018_left= year2018[year2018['cp'] == '좌익수']
year2018_left_war = year2018_left.sort_values(by='war', ascending=False)
year2018_left_war_top1 = year2018_left_war[['cp', 'batter_name']].head(1)

year2018_center = year2018[year2018['cp'] == '중견수']
year2018_center_war = year2018_center.sort_values(by='war', ascending=False)
year2018_center_war_top1 = year2018_center_war[['cp', 'batter_name']].head(1)

year2018_right = year2018[year2018['cp'] == '우익수']
year2018_right_war = year2018_right.sort_values(by='war', ascending=False)
year2018_right_war_top1 = year2018_right_war[['cp', 'batter_name']].head(1)

year2018_war_df = pd.concat([year2018_catcher_war_top1, year2018_first_war_top1, year2018_second_war_top1, year2018_third_war_top1,
                             year2018_shortStop_war_top1, year2018_left_war_top1, year2018_center_war_top1, year2018_right_war_top1])

print("\n\n<2018년 포지션 별 승리 기여도(war) top 1 선수>")
print(year2018_war_df)


subset_df = playerIF[['R', 'H', 'HR', 'RBI', 'SB', 'war', 'avg', 'OBP', 'SLG', 'salary']]
corr_with_salary = subset_df.corrwith(subset_df['salary'])
del corr_with_salary['salary']
print("\n\n<연봉(salary)과 가장 높은 상관관계를 가진 지표>")
corr_with_salary.idxmax()